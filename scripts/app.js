// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var _getUsers, createReplyInput, delay, foo, fullFillFeed, hasParent, sortByDate;
    delay = function(ms, func) {
      return setTimeout(func, ms);
    };
    createReplyInput = function(parent, custom) {
      var _parent, to_create;
      $('.post').each(function(i, elem) {
        if (i > 0) {
          return elem.remove();
        }
      });
      _parent = $(parent);
      to_create = '<div class="post" class="' + custom + '" style="border: 1px solid black; width:1004px;"> <input type="text" name="message" placeholder="type your message here..." style="width:1000px; height:100px"/> <button class="sender">post</button> <div class="fileUpload"> <span><i class="fa fa-paperclip"></i></span> <input type="file" class="upload" name="pending_attachment" /> </div> </div>';
      if (!custom) {
        _parent.prepend(to_create);
      }
      if (custom) {
        return _parent.append(to_create);
      }
    };
    _getUsers = function(id, references) {
      var a, fn, i, l, ref;
      a = false;
      fn = function(i) {
        if (id === references[i].id) {
          return a = references[i].full_name;
        }
      };
      for (i = l = 0, ref = references.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        fn(i);
      }
      return a;
    };
    sortByDate = function(array) {
      var _array;
      _array = array;
      array.sort(function(a, b) {
        if (a.parent.created_at < b.parent.created_at) {
          return 1;
        }
        if (a.parent.created_at > b.parent.created_at) {
          return -1;
        }
        return 0;
      });
      return array;
    };
    hasParent = function(array, value) {
      var j, l, m, ref, ref1, ret, x;
      ret = false;
      for (j = l = 0, ref = array.length; 0 <= ref ? l < ref : l > ref; j = 0 <= ref ? ++l : --l) {
        if (value === array[j].parent.id) {
          ret = j;
          break;
        } else {
          if (indexOf.call(array[j], 'children') >= 0) {
            for (x = m = 0, ref1 = array[j].children.length; 0 <= ref1 ? m < ref1 : m > ref1; x = 0 <= ref1 ? ++m : --m) {
              if (value === array[j].children[x]) {
                ret = j;
                break;
              }
            }
          }
        }
      }
      return ret;
    };
    foo = function(_data, data) {
      "use strict";
      var count, threated;
      threated = [];
      count = 0;
      return data.forEach(function(i) {
        return setTimeout(function() {
          return yam.platform.request({
            url: "threads/" + i.thread_id + ".json",
            type: 'GET',
            success: function(thread) {
              var k, parent;
              threated.push({
                parent: i,
                children: [],
                replies: thread.stats.updates - 1
              });
              count++;
              if (count === data.length) {
                k = _data.length;
                while (k--) {
                  parent = hasParent(threated, _data[k].replied_to_id);
                  if (parent !== false) {
                    threated[parent].children.push(_data[k]);
                    _data.splice(k, 1);
                  }
                }
                return fullFillFeed(sortByDate(threated));
              }
            }
          });
        }, 2000);
      });
    };
    yam.getLoginStatus(function(response) {
      var all_messages, attachments, pending_attachments;
      if (response.authResponse) {
        pending_attachments = [];
        attachments = [];
        all_messages = [];
        $('#popup1').on('click', '.yammer_file_item', function(e) {
          var $target;
          $target = e.target;
          attachments.push(parseInt($($target)[0].attributes[0].value));
          return $('.post').append('<p class="upload"><p><i class="fa fa-check" aria-hidden="true"></i>' + e.target.outerText + 'successfully added!</p></p>');
        });
        $('body').on('change', 'input[name=pending_attachment]', function(e) {
          var _data;
          if (attachments.length > 20) {
            return false;
          }
          _data = new FormData();
          _data.append('attachment', e.target.files[0]);
          $('.post').append('<p id="pending" class="upload">in upload...</p><div class="progressbar"><p class="bar"></p></div>');
          yam.platform.request({
            xhr: function() {
              var xhr;
              xhr = new window.XMLHttpRequest();
              xhr.upload.addEventListener('progress', function(evt) {
                if (evt.lengthComputable) {
                  return $('#pending').next().children('.bar').css('width', '' + (100 * evt.loaded / evt.total) + '%');
                }
              }, false);
              xhr.addEventListener('progress', function(evt) {
                if (evt.lengthComputable) {
                  return $('#pending').next().children('.bar').css('width', '' + (100 * evt.loaded / evt.total) + '%');
                }
              }, false);
              return xhr;
            },
            url: "pending_attachments",
            contentType: "multipart/form-data",
            data: _data,
            processData: false,
            contentType: false,
            type: "POST",
            dataType: "json",
            success: function(data) {
              $('#pending').html('<p><i class="fa fa-check" aria-hidden="true"></i>' + data.original_name + ' successfully uploaded!</p>');
              $('#pending').removeAttr('id');
              return pending_attachments.push(data.id);
            },
            error: function(error) {
              return console.log(error);
            }
          });
          return false;
        });
        $("body").on('click', '.sender', function() {
          var data, i, l, m, ref, ref1;
          data = {
            url: 'messages.json',
            data: {
              body: $(this).prev().val(),
              group_id: '6213444',
              replied_to_id: $(this).parent('.post').siblings('.reply-button').attr('data-reply')
            },
            type: 'POST',
            success: function(msg) {
              return console.log(msg);
            }
          };
          for (i = l = 0, ref = pending_attachments.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
            data.data['pending_attachment' + (i + 1)] = pending_attachments[i];
          }
          for (i = m = 0, ref1 = attachments.length; 0 <= ref1 ? m <= ref1 : m >= ref1; i = 0 <= ref1 ? ++m : --m) {
            if (attachments[i] !== void 0) {
              data.data['og_url'] = 'https://www.yammer.com/api/v1/uploaded_files/' + attachments[i] + '.json';
              data.data['og_fetch'] = 'true';
              data.data['og_object_type'] = 'file';
            }
          }
          yam.platform.request(data);
          return false;
        });
        return yam.platform.request({
          url: 'messages/my_feed.json?threaded=false&limit=20',
          type: 'GET',
          success: function(data) {
            var _data, fn, i, l, ref;
            _data = data.messages;
            fn = function(i) {
              var author;
              author = _getUsers(_data[i].sender_id, data.references);
              if (author !== false) {
                return _data[i].full_name = author;
              }
            };
            for (i = l = 0, ref = _data.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
              fn(i);
            }
            return yam.platform.request({
              url: 'messages/my_feed.json?threaded=true&limit=4',
              type: 'GET',
              success: function(data) {
                var fn1, m, ref1;
                fn1 = function(i) {
                  var author;
                  author = _getUsers(data.messages[i].sender_id, data.references);
                  if (author !== false) {
                    return data.messages[i].full_name = author;
                  }
                };
                for (i = m = 0, ref1 = data.messages.length; 0 <= ref1 ? m < ref1 : m > ref1; i = 0 <= ref1 ? ++m : --m) {
                  fn1(i);
                }
                return foo(_data, data.messages);
              }
            });
          }
        });
      } else {
        return alert('Not logged in!');
      }
    });
    yam.connect.loginButton('#yammer-login', function(response) {
      if (response.authResponse) {
        return $('#yammer-login').html('');
      }
    });
    $('input[name=get_attachment]').on('click', function(e) {
      e.preventDefault();
      return $('#contextMenu').css({
        'top': e.pageY,
        'left': e.pageX
      }).animate({
        height: 'toggle'
      }, 500);
    });
    $('#local_upload').click(function() {
      $('input[name=pending_attachment]').trigger('click');
      return $('#contextMenu').animate({
        height: 'toggle'
      }, 500);
    });
    $('#yammer_file').click(function() {
      return yam.platform.request({
        url: 'uploaded_files/in_group/6213444.json',
        type: 'GET',
        success: function(data) {
          var _data, file, l, len, results;
          _data = data.files;
          $('#popup1').empty();
          results = [];
          for (l = 0, len = _data.length; l < len; l++) {
            file = _data[l];
            results.push($('#popup1').append('<p data-id="' + file.id + '" class="yammer_file_item">' + file.full_name + '</p>'));
          }
          return results;
        }
      });
    });
    $('#yammer_file').wnModal({
      windowID: "1",
      happening: "click"
    });
    fullFillFeed = function(array) {
      var _array, i, j, l, len, len1, m, ref, results;
      _array = array;
      results = [];
      for (l = 0, len = _array.length; l < len; l++) {
        i = _array[l];
        $('#feed').append('<div class="parent" id="current_node"><h2>' + i.parent.full_name + '</h2><p>' + i.parent.body.plain + '</p><button class="reply-button" data-reply="' + i.parent.id + '">reply</button></div>');
        ref = i.children;
        for (m = 0, len1 = ref.length; m < len1; m++) {
          j = ref[m];
          $('#current_node').append('<div class="reply"><h4>' + j.full_name + '</h4><p>' + j.body.plain + '</p><button class="reply-button" data-reply="' + j.id + '">reply</button></div>');
        }
        results.push($('#current_node').removeAttr('id'));
      }
      return results;
    };
    $('body').on('click', '.reply-button', function() {
      var parent;
      parent = $(this).parent();
      return createReplyInput(parent, 'reply-input');
    });
    return createReplyInput('#feed', false);
  });

}).call(this);
